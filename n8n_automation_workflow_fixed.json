{
  "name": "New Topics 4h Updates Automation (Fixed)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Cron Trigger (4h)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8081/api/n8n/recommendations/trigger",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "source",
              "value": "n8n_automation"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "trigger-ai-generation",
      "name": "Trigger AI Generation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-check",
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-ai-success",
      "name": "Check AI Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8080/api/twitter/analyze",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "analyze-twitter-trends",
      "name": "Analyze Twitter Trends",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "http://localhost:8081/api/n8n/scheduler/trigger",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "topics",
              "value": "AI coding, software development, programming tools"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "trigger-topic-search",
      "name": "Trigger Topic Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process and combine results from multiple API calls\nconst results = {\n  timestamp: new Date().toISOString(),\n  aiRecommendations: $input.first().json || {},\n  twitterTrends: $input.all().find(item => item.json.source === 'twitter')?.json || {},\n  topicSearch: $input.all().find(item => item.json.source === 'topics')?.json || {}\n};\n\n// Ensure no blank values\nObject.keys(results).forEach(key => {\n  if (results[key] === null || results[key] === undefined || results[key] === '') {\n    results[key] = {};\n  }\n});\n\nreturn {\n  json: {\n    ...results,\n    processed: true,\n    status: 'success'\n  }\n};"
      },
      "id": "process-results",
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8080/api/recommendations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "get-recommendations",
      "name": "Get Recommendations",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-data",
              "leftValue": "={{ $json.recommendations && $json.recommendations.length > 0 }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-has-data",
      "name": "Check Has Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "message": "ü§ñ AI Dashboard Update\\n\\n‚úÖ New topics generated successfully!\\nüìä Recommendations: {{ $json.recommendations?.length || 0 }}\\nüïê Time: {{ $json.timestamp }}\\n\\nüîó Dashboard: http://localhost:8080",
        "additionalFields": {}
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1780, 200],
      "credentials": {
        "slackApi": {
          "id": "slack-credentials",
          "name": "Slack API"
        }
      }
    },
    {
      "parameters": {
        "message": "AI Dashboard Update - {{ $json.timestamp }}\\n\\nNew topics generated successfully!\\nRecommendations: {{ $json.recommendations?.length || 0 }}\\n\\nDashboard: http://localhost:8080",
        "subject": "AI Dashboard Update",
        "emailFormat": "text"
      },
      "id": "email-notification",
      "name": "Email Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1780, 400],
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "automation_logs",
        "columns": "timestamp,status,recommendations_count,data",
        "values": "={{ $json.timestamp }},success,{{ $json.recommendations?.length || 0 }},{{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "save-to-database",
      "name": "Save to Database",
      "type": "n8n-nodes-base.sqlite",
      "typeVersion": 1,
      "position": [2000, 300],
      "credentials": {
        "sqlite": {
          "id": "sqlite-credentials",
          "name": "SQLite Database"
        }
      }
    },
    {
      "parameters": {
        "message": "‚ùå AI Dashboard Update Failed\\n\\nError: {{ $json.error || 'Unknown error' }}\\nTime: {{ $json.timestamp }}\\n\\nPlease check the logs.",
        "additionalFields": {}
      },
      "id": "error-notification",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1780, 500],
      "credentials": {
        "slackApi": {
          "id": "slack-credentials",
          "name": "Slack API"
        }
      }
    }
  ],
  "connections": {
    "Cron Trigger (4h)": {
      "main": [
        [
          {
            "node": "Trigger AI Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger AI Generation": {
      "main": [
        [
          {
            "node": "Check AI Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AI Success": {
      "main": [
        [
          {
            "node": "Analyze Twitter Trends",
            "type": "main",
            "index": 0
          },
          {
            "node": "Trigger Topic Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Twitter Trends": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Topic Search": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Get Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recommendations": {
      "main": [
        [
          {
            "node": "Check Has Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Has Data": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-23T08:50:00.000Z",
  "versionId": "1"
}
